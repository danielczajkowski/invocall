let isScrollingCarousel = false;

function changeSliderByScroll(swiper) {
  let startTouchY;
  const htmlElement = document.documentElement;

  const wheelEvent = (event) => {
    if (event.deltaY > 0) {
      if (swiper.isEnd) {
        window.removeEventListener('wheel', wheelEvent);
        resetStyles();
      } else {
        swiper.slideNext();
      }
    } else {
      if (swiper.isBeginning) {
        window.removeEventListener('wheel', wheelEvent);
        resetStyles();
      } else {
        swiper.slidePrev();
      }
    }
    event.preventDefault();
  };

  const touchStartEvent = (event) => {
    startTouchY = event.touches[0].clientY;
  };

  const touchMoveEvent = (event) => {
    const touchY = event.touches[0].clientY;
    if (touchY > startTouchY) {
      if (swiper.isBeginning) {
        window.removeEventListener('touchmove', touchMoveEvent);
        resetStyles();
      } else {
        swiper.slidePrev();
      }
    } else {
      if (swiper.isEnd) {
        window.removeEventListener('touchmove', touchMoveEvent);
        resetStyles();
      } else {
        swiper.slideNext();
      }
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    startTouchY = touchY;
  };

  const resetStyles = () => {
    htmlElement.style.overflow = '';
    htmlElement.style.paddingRight = '';
    htmlElement.style.background = '';
  };

  window.addEventListener('wheel', wheelEvent, { passive: false });
  window.addEventListener('touchstart', touchStartEvent, { passive: true });
  window.addEventListener('touchmove', touchMoveEvent, { passive: false });
}

const checkCarouselCenter = (element, swiper) => {
  if (window.innerWidth >= 1200) {
    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          let htmlElement = document.querySelector('html');

          isScrollingCarousel = true;
          htmlElement.style.overflow = 'hidden';
          htmlElement.style.paddingRight = `${scrollbarWidth}px`;
          htmlElement.style.background  = `#f1f1f1`;

          changeSliderByScroll(swiper);
        }
      });
    }, {
      rootMargin: `-50% 0px`,
    });
    observer.observe(element);
  }
};






const runCarouselSlider = (elms) => {
  Array.prototype.forEach.call(elms, el => {
    const swiper = new Swiper(el, {
      loop: false,
      slidesPerView: 1,
      effect: 'fade',
      fadeEffect: {
        crossFade: true
      },
      spaceBetween: 0,
      pagination: {
        el: el.querySelector('.carousel__pagination'),
        clickable: true,
      },
    });

    checkCarouselCenter(el, swiper);
  });
};


//dom loaded
document.addEventListener('DOMContentLoaded', () => {
  const elms = document.getElementsByClassName('carousel__swiper');
  runCarouselSlider(elms);
});




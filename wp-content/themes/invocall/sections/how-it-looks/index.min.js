const setHILGrigGap = () => {

  const hilWrapper = document.querySelectorAll('.how-it-looks__tiles');

  hilWrapper.forEach(wrapper => {
    const sticky = wrapper.querySelector('.how-it-looks__tile__sticky');
    const right = wrapper.querySelector('.how-it-looks__tile__content--right');

    const stickyHeight = sticky.offsetHeight * 1.5;
    const rightWidth = right.offsetWidth;

    const contents = wrapper.querySelectorAll('.how-it-looks__tile__content');
    const rightWrapper = wrapper.querySelectorAll('.how-it-looks__tile__content--wrapper');

    contents.forEach(content => {
      content.style.gridGap = `${stickyHeight}px`;
    });
    rightWrapper.forEach(content => {
      content.setAttribute('style', `--after-width: ${rightWidth}px; --after-top: ${-1 * stickyHeight / 2}px`);

    });
  });
};

const showStickyElements = () => {
  const tiles = document.querySelectorAll('.how-it-looks__tiles');
  let lastScrollPosition = window.pageYOffset;


  tiles.forEach(tile => {
    const sticky = tile.querySelector('.how-it-looks__tile__sticky');
    const contentWrappers = tile.querySelectorAll('.how-it-looks__tile__content--wrapper');
    const imageWrappers = tile.querySelectorAll('.how-it-looks__tile__image--wrapper');
    const numberWrappers = tile.querySelectorAll('.how-it-looks__tile__number');

    window.addEventListener('scroll', () => {
      const stickyBottom = sticky.getBoundingClientRect().bottom;
      const currentScrollPosition = window.pageYOffset;


      const distances = [];

      contentWrappers.forEach(contentWrapper => {
        const contentWrapperTop = contentWrapper.getBoundingClientRect().top;

        let distance = {};

        distance['distance'] = Math.abs(stickyBottom - contentWrapperTop);
        distance['id'] = contentWrapper.dataset.id;

        distances.push(distance);
      });

      const minDistance = Math.min(...distances.map(d => d.distance));

      if (lastScrollPosition < currentScrollPosition) {

        imageWrappers.forEach(imageWrapper => {
          const id = imageWrapper.dataset.id;

          if (distances.find(d => d.id === id && d.distance === minDistance)) {
            imageWrapper.classList.add('active');

            let sibling = imageWrapper.previousElementSibling;
            while (sibling) {
              if (sibling.dataset.id === id) {
                sibling.classList.add('active');
              }
              sibling = sibling.previousElementSibling;
            }
          }
        });

        numberWrappers.forEach(numberWrapper => {
          const id = numberWrapper.dataset.id;

          if (distances.find(d => d.id === id && d.distance === minDistance)) {
            numberWrapper.classList.add('active');

            let sibling = numberWrapper.previousElementSibling;
            while (sibling) {
              if (sibling.dataset.id === id) {
                sibling.classList.add('active');
              }
              sibling = sibling.previousElementSibling;
            }
          }
        });

      } else {

        imageWrappers.forEach(imageWrapper => {
          const id = imageWrapper.dataset.id;

          if (distances.find(d => d.id === id && d.distance === minDistance)) {
            let sibling = imageWrapper.nextElementSibling;
            if (sibling) {
              sibling.classList.remove('active');
            }
          }
        });

        numberWrappers.forEach(numberWrapper => {
          const id = numberWrapper.dataset.id;

          if (distances.find(d => d.id === id && d.distance === minDistance)) {
            let sibling = numberWrapper.nextElementSibling;
            if (sibling) {
              sibling.classList.remove('active');
            }
          }
        });

      }
      lastScrollPosition = currentScrollPosition;

    });
  });
};

//dom loaded
document.addEventListener('DOMContentLoaded', () => {
  setHILGrigGap();
  showStickyElements();
});

//resize
window.addEventListener('resize', () => {
  setHILGrigGap();
});